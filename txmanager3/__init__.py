"""
txManager module.

"""
# -----------------------------------------------------------------------------
#
# Copyright (c) 1986-2018 Pixar. All rights reserved.
#
# The information in this file (the "Software") is provided for the exclusive
# use of the software licensees of Pixar ("Licensees").  Licensees have the
# right to incorporate the Software into other products for use by other
# authorized software licensees of Pixar, without fee. Except as expressly
# permitted herein, the Software may not be disclosed to third parties, copied
# or duplicated in any form, in whole or in part, without the prior written
# permission of Pixar.
#
# The copyright notices in the Software and this entire statement, including the
# above license grant, this restriction and the following disclaimer, must be
# included in all copies of the Software, in whole or in part, and all permitted
# derivative works of the Software, unless such copies or derivative works are
# solely in the form of machine-executable object code generated by a source
# language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL PIXAR BE
# LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  IN NO CASE WILL
# PIXAR'S TOTAL LIABILITY FOR ALL DAMAGES ARISING OUT OF OR IN CONNECTION WITH
# THE USE OR PERFORMANCE OF THIS SOFTWARE EXCEED $50.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# -----------------------------------------------------------------------------


import logging
import traceback
import os.path

__all__ = ['core', 'ui', 'txparams', 'txfile']

TX_MANAGER_VER = 1.0
# possible file states
STATE_MISSING = 0       # this is an image and the tex is missing.
STATE_EXISTS = 1        # this is an image and the tex is available.
STATE_IS_TEX = 2        # this is already a tex and we are all good.
STATE_IN_QUEUE = 3      # this image has been added to the conversion queue.
STATE_PROCESSING = 4    # this image is being txmade.
STATE_ERROR = 5         # txmake failed.
STATE_REPROCESS = 6     # ignore tex on disk and txmake again
STATE_UNKNOWN = 7       # need to check the existence of the texture(s)
STATE_INPUT_MISSING = 8 # the input image does not exist
STATE_AS_STR = ['STATE_MISSING', 'STATE_EXISTS', 'STATE_IS_TEX',
                'STATE_IN_QUEUE', 'STATE_PROCESSING', 'STATE_ERROR',
                'STATE_REPROCESS', 'STATE_UNKNOWN', 'STATE_INPUT_MISSING']
TXMAKE_SKIP_CONDITION = [STATE_IN_QUEUE, STATE_PROCESSING,
                         STATE_EXISTS, STATE_IS_TEX, STATE_INPUT_MISSING]
# valid texture file extensions
TEX_EXTENSIONS = ['.tex', '.tx', '.txr', '.ptx', '.ptex']
IMG_EXTENSIONS = ['.tif', '.exr', '.jpg', '.sgi', '.tga', '.iff', '.dpx',
                  '.bmp', '.hdr', '.png', '.gif', '.ppm', '.xpm', '.z']
# html formatting
NW = '<div style=\"white-space: nowrap;\">'
IT = '<div style=\"text-indent: 10px;\">'
# logger format
LOG_FMT = '[%(levelname)s] (%(threadName)-10s) %(name)s %(funcName)s: %(message)s'


class TxManagerError(Exception):
    """Exception reporting class

    Extends:
        Exception
    """

    def __init__(self, value):
        super(TxManagerError, self).__init__(value)
        self.value = 'TxManager Error: %s' % value

    def __str__(self):
        return str(self.value)


def module_path():
    """
    Returns this module's file path, i.e. the directory containing this file.
    """
    try:
        this_file_path = __file__
    except NameError:
        # inside an interpreter, we can use the stack to find the file
        # path.
        tbs = traceback.extract_stack()
        this_file_path = tbs[0][0]
    # move back up to rfm directory
    dev_root = os.path.dirname(this_file_path)

    return dev_root


def set_log_level(level):
    """
    Set the logging level for this module. This is only useful if the module
    is not using another logger.
    """
    __log__.setLevel(level)


def set_logger(logger):
    """
    Make this module adopt another logger and coalesce outputs into one stream.
    """
    global __log__
    __log__ = logger


def txm_log():
    """
    Return the logger.
    """
    return __log__


def get_logger(name):
    """
    Create a new configured logger and returns it.
    """
    log = logging.getLogger(name)
    # we don't set the logger's level to inherit from the parent logger.
    if log.handlers:
        return log
    fmt = logging.Formatter(LOG_FMT)
    shdlr = logging.StreamHandler()
    shdlr.setFormatter(fmt)
    log.addHandler(shdlr)
    log.propagate = False
    return log

__log__ = get_logger(__name__)
__log__.setLevel(logging.WARNING)
